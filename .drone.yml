---
kind: pipeline
type: docker
name: main

platform:
  os: linux
  arch: amd64

trigger:
  event:
    - push
    - tag

image_pull_secrets:
  - docker-dockerconfig
  - quay-dockerconfig

anchors:
  aws_credentials: &aws_credentials
    AWS_DEFAULT_REGION:
      from_secret: aws-region
    AWS_ACCESS_KEY_ID:
      from_secret: aws-key-id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws-secret-key

  gradle_task: &gradle_task
    image: gradle:7.0.2-jdk8-hotspot
    environment:
      # Gradle folder
      GRADLE_USER_HOME: "/drone/src/.gradle"

      # For interaction with repositories
      <<: *aws_credentials

  cache_settings: &cache_settings
    # debug: true
    cache_key: '{{ .Commit.Branch }}'
    access_key:
      from_secret: aws-key-id
    secret_key:
      from_secret: aws-secret-key
    bucket:
      from_secret: aws-cache-bucket
    region:
      from_secret: aws-region
    local_root: /drone/src
    mount:
      - .gradle
      - .cache

steps:
  - name: fetch
    image: alpine/git
    commands:
      - git fetch --tags
      - git submodule update --init --recursive

  - name: restore_cache
    image: meltwater/drone-cache
    pull: true
    settings:
      restore: true
      <<: *cache_settings

  - <<: *gradle_task
    name: initialization
    commands:
      - echo "{}" > build_info.json
      - gradle -i --no-daemon -PmiRepoAccessKeyId=$${AWS_ACCESS_KEY_ID} -PmiRepoSecretAccessKey=$${AWS_SECRET_ACCESS_KEY} CreateInfoFile

  - <<: *gradle_task
    name: publish_to_mipub
    commands:
      - gradle --no-daemon -i -PmiRepoAccessKeyId=$${AWS_ACCESS_KEY_ID} -PmiRepoSecretAccessKey=$${AWS_SECRET_ACCESS_KEY} -x test PublishAllPublicationsToMiPubRepository

  - name: telegram_published
    image: appleboy/drone-telegram
    settings:
      token:
        from_secret: telegram-token
      to:
        from_secret: telegram-chat-id-micore
      format: markdown
      template_vars_file: build_info.json
      message: üß© build {{build.number}} on {{commit.branch}} published ```com.milaboratory:milib:{{tpl.version}}```

  - <<: *gradle_task
    name: test
    commands:
      - gradle -i --no-daemon -PmiRepoAccessKeyId=$${AWS_ACCESS_KEY_ID} -PmiRepoSecretAccessKey=$${AWS_SECRET_ACCESS_KEY} test

  - name: test_report_upload
    image: amazon/aws-cli
    when:
      status:
        - success
        - failure
    commands:
      - aws s3 cp --recursive build/reports/tests/test s3://$${DEPLOY_S3_CDN_BUCKET}/$${DEPLOY_S3_CDN_PREFIX}/internal/ci/${DRONE_REPO}/${DRONE_COMMIT}-${DRONE_BUILD_NUMBER}-$${URL_SECRET}/tests/
    environment:
      <<: *aws_credentials
      DEPLOY_S3_CDN_BUCKET:
        from_secret: cdn-s3-bucket
      DEPLOY_S3_CDN_PREFIX:
        from_secret: cdn-s3-prefix
      URL_SECRET:
        from_secret: url-secret

  - name: telegram
    image: appleboy/drone-telegram
    when:
      status:
        - success
        - failure
    settings:
      token:
        from_secret: telegram-token
      to:
        from_secret: telegram-chat-id-micore
      format: markdown
      template_vars_file: build_info.json
      message: >
        {{#success build.status}}
        ‚úÖ MiLib build {{build.number}} by {{commit.author}} on {{commit.branch}} test success.
        {{else}}
        ‚ùå MiLib build {{build.number}} by {{commit.author}} on {{commit.branch}} test failure.
        {{/success}}


        üåê {{build.link}}


        [üìä Test Report](https://cdn.milaboratory.com/internal/ci/${DRONE_REPO}/${DRONE_COMMIT}-${DRONE_BUILD_NUMBER}-{{tpl.urlsecret}}/tests/index.html)

  - name: rebuild_cache
    image: meltwater/drone-cache
    settings:
      rebuild: true
      <<: *cache_settings

---
kind: signature
hmac: 7f1d0f1593e108096227d9557aed5dfb5c578a1a0e5352782649dfa3324b90e3

...
